# Instructions

During your interaction with the user, if you find anything reusable in this project (e.g. version of a library, model name), especially about a fix to a mistake you made or a correction you received, you should take note in the `Lessons` section in the `.cursorrules` file so you will not make the same mistake again.

You should also use the `.cursorrules` file as a Scratchpad to organize your thoughts. Especially when you receive a new task, you should first review the content of the Scratchpad, clear old different task if necessary, first explain the task, and plan the steps you need to take to complete the task. You can use todo markers to indicate the progress, e.g.
[X] Task 1
[ ] Task 2

Also update the progress of the task in the Scratchpad when you finish a subtask.
Especially when you finished a milestone, it will help to improve your depth of task accomplishment to use the Scratchpad to reflect and plan.
The goal is to help you maintain a big picture as well as the progress of the task. Always refer to the Scratchpad when you plan the next step.

# Tools

Note all the tools are in python3. So in the case you need to do batch processing, you can always consult the python files and write your own script.

## Screenshot Verification

The screenshot verification workflow allows you to capture screenshots of web pages and verify their appearance using LLMs. The following tools are available:

1. Screenshot Capture:

```bash
venv/bin/python3 tools/screenshot_utils.py URL [--output OUTPUT] [--width WIDTH] [--height HEIGHT]
```

2. LLM Verification with Images:

```bash
venv/bin/python3 tools/llm_api.py --prompt "Your verification question" --provider {openai|anthropic} --image path/to/screenshot.png
```

Example workflow:

```python
from screenshot_utils import take_screenshot_sync
from llm_api import query_llm

# Take a screenshot

screenshot_path = take_screenshot_sync('https://example.com', 'screenshot.png')

# Verify with LLM

response = query_llm(
    "What is the background color and title of this webpage?",
    provider="openai",  # or "anthropic"
    image_path=screenshot_path
)
print(response)
```

## LLM

You always have an LLM at your side to help you with the task. For simple tasks, you could invoke the LLM by running the following command:

```
venv/bin/python3 ./tools/llm_api.py --prompt "What is the capital of France?" --provider "anthropic"
```

The LLM API supports multiple providers:

- OpenAI (default, model: gpt-4o)
- Azure OpenAI (model: configured via AZURE_OPENAI_MODEL_DEPLOYMENT in .env file, defaults to gpt-4o-ms)
- DeepSeek (model: deepseek-chat)
- Anthropic (model: claude-3-sonnet-20240229)
- Gemini (model: gemini-pro)
- Local LLM (model: Qwen/Qwen2.5-32B-Instruct-AWQ)

But usually it's a better idea to check the content of the file and use the APIs in the `tools/llm_api.py` file to invoke the LLM if needed.

## Web browser

You could use the `tools/web_scraper.py` file to scrape the web.

```bash
venv/bin/python3 ./tools/web_scraper.py --max-concurrent 3 URL1 URL2 URL3
```

This will output the content of the web pages.

## Search engine

You could use the `tools/search_engine.py` file to search the web.

```bash
venv/bin/python3 ./tools/search_engine.py "your search keywords"
```

This will output the search results in the following format:

```
URL: https://example.com
Title: This is the title of the search result
Snippet: This is a snippet of the search result
```

If needed, you can further use the `web_scraper.py` file to scrape the web page content.

# Lessons

## User Specified Lessons

- You have a python3 venv in ./venv. Use it.
- Include info useful for debugging in the program output.
- Read the file before you try to edit it.
- Due to Cursor's limit, when you use `git` and `gh` and need to submit a multiline commit message, first write the message in a file, and then use `git commit -F <filename>` or similar command to commit. And then remove the file. Include "[Cursor] " in the commit message and PR title.
- Project structure: Main code goes in interpreter/src/, scripts in interpreter/, configuration in root directory. Avoid creating duplicate files by following these conventions:
  - Python modules: interpreter/src/
  - Scripts: interpreter/ (\*.bat for Windows)
  - Documentation: interpreter/README.md for users, inline docstrings for code
  - Generated files (don't edit manually): interpreter/audio_interpreter.egg-info/, venv/, **pycache**/

## Cursor learned

- For search results, ensure proper handling of different character encodings (UTF-8) for international queries
- Add debug information to stderr while keeping the main output clean in stdout for better pipeline integration
- When using seaborn styles in matplotlib, use 'seaborn-v0_8' instead of 'seaborn' as the style name due to recent seaborn version changes
- Use 'gpt-4o' as the model name for OpenAI's GPT-4 with vision capabilities
- When searching for recent news, use the current year (2025) instead of previous years, or simply use the "recent" keyword to get the latest information
- Use PyAudioWPatch instead of standard PyAudio for Windows to capture system audio output with WASAPI loopback support
- The Whisper API model name to use is "whisper-1" in the OpenAI Python client

# Scratchpad

## Current Task: Create an Interpreter App with Whisper Integration

The goal is to create a small interpreter app that can:

1. Set up OpenAI's speech-to-text API (Whisper)
2. Use Whisper to transcribe audio coming from the computer's output or a Chrome webpage

### Plan:

[X] Step 1: Set up project structure and dependencies
[X] Create project directories
[X] Create requirements.txt with necessary dependencies
[X] Create .env file for environment variables
[X] Create README.md with usage instructions
[X] Step 2: Implement audio capture functionality
[X] Select PyAudioWPatch for system audio capture (WASAPI loopback)
[X] Implement audio capture from computer output
[X] Support any audio source that can be captured by the system
[X] Step 3: Set up OpenAI Whisper API integration
[X] Create Whisper API client using OpenAI Python SDK
[X] Implement audio transcription functionality
[X] Step 4: Create a simple user interface
[X] Create basic controls for starting/stopping audio capture
[X] Add display area for transcription results
[X] Add ability to save transcriptions
[X] Step 5: Improve installation and deployment
[X] Create setup.py for package installation
[X] Create installation script (install.bat)
[X] Create run script (run.bat)
[X] Improve documentation in README.md
[X] Step 6: Add testing capabilities
[X] Create a test script for Whisper API integration
[X] Create a batch file for running the test
[X] Update README with testing instructions
[ ] Step 7: Test the application
[ ] Test with system audio
[ ] Test with Chrome audio
[ ] Step 8: Implement additional features (if time permits)
[X] Add ability to save transcriptions
[ ] Add language selection options
[ ] Improve UI/UX

### Implementation Notes:

- Using PyAudioWPatch for audio capture, which provides WASAPI loopback support on Windows
- Using PyQt6 for the user interface
- Using OpenAI's Python client for Whisper API integration
- Supporting real-time transcription of system audio
- Audio is captured in 5-second chunks by default (configurable)
- The application uses WASAPI loopback to capture audio, which works for any audio playing on the system, including Chrome browser audio
- Windows-only application due to the use of WASAPI for audio capture
- The Whisper API model used is "whisper-1"
